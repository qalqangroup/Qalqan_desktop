package main

import (
	"fmt"
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/widget"
)

func InitUI(w fyne.Window) {

	bgImage := canvas.NewImageFromFile("assets/background.png")
	bgImage.FillMode = canvas.ImageFillStretch

	icon, err := fyne.LoadResourceFromPath("assets/icon.ico")
	if err != nil {
		fmt.Println("Error:", err)
	} else {
		w.SetIcon(icon)
	}

	// Select source of key
	selectSource := widget.NewSelect([]string{"File", "Key"}, nil)
	selectSource.PlaceHolder = "Select source of key"

	// –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è
	passwordEntry := widget.NewEntry()
	passwordEntry.SetPlaceHolder("Enter a password")

	// –ö–Ω–æ–ø–∫–∞ OK
	okButton := widget.NewButton("OK", nil)

	// –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞ Custom Message
	customMessage := widget.NewRadioGroup([]string{""}, nil)

	// –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç Custom Message
	customMessageLabel := canvas.NewText("Custom Message", color.RGBA{38, 26, 172, 255})
	customMessageLabel.TextSize = 18
	customMessageLabel.TextStyle = fyne.TextStyle{Bold: true}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫—É –∏ —Ç–µ–∫—Å—Ç
	customMessageContainer := container.NewHBox(customMessage, customMessageLabel)

	// –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞
	topRow := container.NewGridWithColumns(4,
		selectSource,
		passwordEntry,
		okButton,
		customMessageContainer,
	)

	// üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ `Hash of Key`
	spacer := widget.NewLabel(" ") // –û—Ç—Å—Ç—É–ø (‚âà20px)

	// Hash of Key
	hashLabel := canvas.NewText("Hash of Key", color.RGBA{38, 26, 172, 255})
	hashLabel.TextSize = 18
	hashLabel.TextStyle = fyne.TextStyle{Bold: true}

	// –ü–æ–ª–µ –≤–≤–æ–¥–∞ Hash Value
	hashValue := widget.NewEntry()
	hashValue.Disable()
	hashValue.Resize(fyne.NewSize(400, 40))

	// –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º Hash Label –∏ Entry
	hashContainer := container.NewVBox(
		container.NewCenter(hashLabel),
		container.NewCenter(container.NewGridWrap(fyne.NewSize(400, 40), hashValue)),
	)

	// –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∏ "Mode (for experts)"
	modeExperts := widget.NewRadioGroup([]string{"Mode (for experts)"}, nil)

	// –†–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ "Session keys" –∏ "Mode (for experts)"
	sessionKeys := widget.NewRadioGroup([]string{"Session keys"}, nil)

	sessionModeContainer := container.NewGridWithColumns(2, sessionKeys, modeExperts)

	// –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –ö–Ω–æ–ø–∫–∏ Encrypt/Decrypt
	encryptButton := widget.NewButton("Encrypt a file", nil)
	decryptButton := widget.NewButton("Decrypt a file", nil)

	encryptDecryptRow := container.NewCenter(container.NewHBox(encryptButton, decryptButton))

	// –õ–æ–≥-—Ñ–∞–π–ª (TextBox)
	logs := widget.NewMultiLineEntry()
	logs.SetPlaceHolder("Logs output...")

	// –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
	clearLogsButton := widget.NewButton("Clear logs", func() {
		logs.SetText("")
	})

	mainUI := container.NewVBox(
		widget.NewLabel(" "),
		topRow,
		spacer,
		hashContainer,
		sessionModeContainer,
		encryptDecryptRow,
		logs,
		container.NewCenter(clearLogsButton),
	)

	content := container.NewStack(bgImage, mainUI)

	w.SetContent(content)
}
